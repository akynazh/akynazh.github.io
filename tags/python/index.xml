<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Norwegian Wood</title>
    <link>http://akynazh.site/tags/python/</link>
    <description>Recent content in python on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Jzh</copyright>
    <lastBuildDate>Wed, 04 Jan 2023 22:55:27 +0800</lastBuildDate><atom:link href="http://akynazh.site/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pipenv 简单使用记录</title>
      <link>http://akynazh.site/posts/2023/01/simple-use-record-of-pipenv/</link>
      <pubDate>Wed, 04 Jan 2023 22:55:27 +0800</pubDate>
      
      <guid>http://akynazh.site/posts/2023/01/simple-use-record-of-pipenv/</guid>
      <description>关于pipenv pipenv集成了pip，virtualenv两者的功能，且完善了两者的一些缺陷。
安装pipenv 1pip install pipenv -U 创建虚拟环境 初次创建环境可以使用以下类似命令：
1pipenv install --python C:/Users/akyna/AppData/Local/Programs/Python/Python37/python.exe --pypi-mirror https://pypi.tuna.tsinghua.edu.cn/simple --python 是可选的，可以指定python版本，参数为python解释器的绝对路径，如果不指定，默认使用当前系统的python。
--pypi-mirror 是可选的，可以指定镜像，加速下载。
创建好后，在当前目录下将会生成 Pipfile 文件，在 ~\.virtualenvs 下生成虚拟环境目录（存放python解释器和依赖）。
如果目录中已经存在 Pipfile 或者 requirements.txt，pipenv会自动检测这两个文件并将对应依赖进行安装。
查看虚拟环境目录位置：
1pipenv --venv 激活虚拟环境 1pipenv shell # 激活虚拟环境 2 3python -V 如果激活了虚拟环境，在当前shell下，使用的python或者pip都是虚拟环境中的python和pip。
配置Pip并安装依赖 配置镜像源为清华源：
1vim Pipfile 2 3[[source]] 4url = &amp;#34;https://pypi.tuna.tsinghua.edu.cn/simple&amp;#34; 以后所有依赖的安装都不需要指定 --pypi-mirror 了。
安装依赖：（建议关闭代理，如果有的话）
1pipenv install {pkg} # 如果激活了虚拟环境，可以使用pip 2# pipenv install -r requirements.txt 安装完依赖后，将会生成 Pipfile.lock 文件，以后初始化虚拟环境都只需要运行 pipenv install 即可完成所有依赖的安装。
当然，也可以通过生成 requirements.</description>
    </item>
    
    <item>
      <title>Python 开发中遇到的 bug 记录</title>
      <link>http://akynazh.site/posts/2022/11/record-of-bugs-encountered-in-python-development/</link>
      <pubDate>Fri, 04 Nov 2022 22:53:34 +0800</pubDate>
      
      <guid>http://akynazh.site/posts/2022/11/record-of-bugs-encountered-in-python-development/</guid>
      <description>持续更新中。
pipenv 无法正常 install 1PS C:\Users\akyna\Codes\test\test_py&amp;gt; pipenv install 2Usage: pipenv install [OPTIONS] [PACKAGES]... 3 4ERROR:: --system is intended to be used for pre-existing Pipfile installation, not installation of specific packages. Aborting. 解决方法：
因为pipenv检测到之前在该目录下创建过了环境，需要先删除之前的环境才可以：
1PS C:\Users\akyna\Codes\test\test_py&amp;gt; pipenv --rm 2Removing virtualenv (C:\Users\akyna\.virtualenvs\test_py-_qApXuy4)... requests 库 headers 字段编码错误 1UnicodeEncodeError: &amp;#39;latin-1&amp;#39; codec can&amp;#39;t encode characters in position 30-34: ordinal not in range(256) 解决方法：
加上.encode(&amp;lsquo;utf-8&amp;rsquo;)：
1return { 2 &amp;#39;User-Agent&amp;#39;: 3 &amp;#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.</description>
    </item>
    
    <item>
      <title>Python 自动爬取花瓣网任意面板中所有图片</title>
      <link>http://akynazh.site/posts/2020/02/python-automatically-crawls-all-pictures-in-any-panel-of-petal-net/</link>
      <pubDate>Thu, 13 Feb 2020 00:14:23 +0800</pubDate>
      
      <guid>http://akynazh.site/posts/2020/02/python-automatically-crawls-all-pictures-in-any-panel-of-petal-net/</guid>
      <description>注：该项目只适用于旧版花瓣，但其中的思路值得领会。对于新版花瓣编写的代码，逻辑差别不大。
需要安装的库 urllib easygui selenium webdriver_manager 获取过程 进入面板内 复制当前面板url 启动该脚本按提示进行即可 代码编写流程 分析pin图特点 查看面板源码，可以在对应的script中找到面板中图片的json数据。
在app.page[&amp;ldquo;board&amp;rdquo;]下可以找到&amp;quot;pins&amp;quot;:[{&amp;hellip;}]，主要图片ID(pin)位于这里面。
获取到图片的ID(pin)之后可以对应访问点击图片后进入的地址http://huaban.com/pins/pinId/，并获取页面源码：
显然可见主要图片的源码特征，书写对应正则表达式可以获取图片真实地址。
分析滚动特点 通过滚动页面我们可以发现加载规律：
原来的图片对应的代码：
经过滚动，原来的代码逐渐被一些新的代码取代：
而不难发现他们都有对应的data-id!而data-id就是图片地址中对应的pin。
所以我们可以通过webdriver滚动加载页面，每滚动一次就进行一次data-id的读取，并利用集合进行去重即可。
具体实现 1# 花瓣用户任意面板图片爬取 2import urllib.request 3import urllib.error 4import re 5import os 6import datetime 7import easygui 8import time 9from selenium import webdriver 10from selenium.webdriver.chrome.service import Service 11from selenium.webdriver.common import service 12from webdriver_manager import driver 13from webdriver_manager.chrome import ChromeDriverManager 14import winsound 15 16# 获取网页中所有图片对应的pin 17def get_pins(url_, num_): 18 my_options = webdriver.</description>
    </item>
    
  </channel>
</rss>