<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>proxy on Norwegian Wood</title>
    <link>https://akynazh.site/tags/proxy/</link>
    <description>Recent content in proxy on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>akynazh@qq.com (Jzh)</managingEditor>
    <webMaster>akynazh@qq.com (Jzh)</webMaster>
    <copyright>Jzh</copyright>
    <lastBuildDate>Sun, 19 Feb 2023 11:01:46 +0800</lastBuildDate><atom:link href="https://akynazh.site/tags/proxy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从 Requests 和 urllib 库源码分析代理过程</title>
      <link>https://akynazh.site/posts/2023/02/analyze-the-agent-process-from-the-source-code-of-the-requests-and-urllib-library/</link>
      <pubDate>Sun, 19 Feb 2023 11:01:46 +0800</pubDate>
      <author>akynazh@qq.com (Jzh)</author>
      <guid>https://akynazh.site/posts/2023/02/analyze-the-agent-process-from-the-source-code-of-the-requests-and-urllib-library/</guid>
      <description>Python(&amp;gt;=3.5) 使用 requests 发送请求时将会自动检测系统代理，通过 urllib.request.getproxies 实现。
同时，在 Python#26307 中解决了 urllib.request.getproxies 函数的一个 bug，此 bug 是在 2022.5.12 被解决，解决了 https 代理字段的错误。所以以下分析是基于在该日期之后发布的 python 版本进行的。
下面将从源码分析代理过程，Python版本为 3.10.9。
首先以一个例子引入 1import requests 2import cfg 3# resp = requests.get(url=&amp;#39;https://google.com&amp;#39;, proxies=cfg.MY_PROXY_JSON) 4resp = requests.get(url=&amp;#39;https://google.com&amp;#39;) 5print(resp) # &amp;lt;Response [200]&amp;gt; 系统已经开启代理，在墙内向谷歌发送请求，在没有配置 proxies 的情况下请求成功了。
分析 requests 和 urllib 源码 通过 requests 发送请求，经过 sessions.py：
1settings = self.merge_environment_settings( 2 prep.url, proxies, stream, verify, cert 3) 阅读该函数内容：
1# requests/sessions.py 2def merge_environment_settings(self, url, proxies, stream, verify, cert): 3 &amp;#34;&amp;#34;&amp;#34; 4 Check the environment and merge it with some settings.</description>
    </item>
    
    <item>
      <title>Clash-Linux 配置使用记录</title>
      <link>https://akynazh.site/posts/2023/01/clash-linux-configuration-usage-record/</link>
      <pubDate>Fri, 13 Jan 2023 21:43:06 +0800</pubDate>
      <author>akynazh@qq.com (Jzh)</author>
      <guid>https://akynazh.site/posts/2023/01/clash-linux-configuration-usage-record/</guid>
      <description>安装 1wget https://github.com/Dreamacro/clash/releases/download/v1.11.8/clash-linux-amd64-v1.11.8.gz 2gzip -d clash-linux-amd64-v1.11.8.gz 3sudo mv clash-linux-amd64-v1.11.8 /usr/bin/clash 4chmod +x /usr/bin/clash 获取订阅链接并配置 在自己使用的机场中获取clash订阅链接，然后下载配置文件到 ~/.config/clash/config.yaml:
1mkdir -p ~/.config/clash 2cd ~/.config/clash 3wget -O config.yaml {link} 4 5vim config.yaml 6 7# 不允许局域网中其它电脑使用该代理 8allow-lan: false 9# 设置 clash 管理界面密码 10secret: your password 11# 允许从外部访问 clash 管理界面，其中端口 9090 可自行配置 12external-controller: &amp;#39;0.0.0.0:9090&amp;#39; 运行代理并选择节点 1# 第一次需要下载Country.mmdb，可考虑先运行以下命令 2# clash -f ~/.config/clash/config.yaml 3 4nohup clash -f ~/.config/clash/config.yaml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp; 登录clash管理界面进行网速的测试和节点的切换：
访问clash.razord.top，设置Host为主机IP，端口默认为9090，密钥为刚刚配置的密码。
最后设置proxy环境变量，可通过alias进行配置以方便使用。
实现开机自启动 vim /etc/systemd/system/clash.service
1[Unit] 2Description=Clash Proxy 3 4[Service] 5WorkingDirectory=/root 6ExecStart=/usr/bin/clash -f .</description>
    </item>
    
  </channel>
</rss>