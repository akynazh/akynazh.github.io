<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Norwegian Wood</title>
    <link>/tags/java/</link>
    <description>Recent content in java on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Jzh</copyright>
    <lastBuildDate>Fri, 26 Aug 2022 16:04:19 +0800</lastBuildDate><atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>策略模式</title>
      <link>/posts/2022/08/policy-mode/</link>
      <pubDate>Fri, 26 Aug 2022 16:04:19 +0800</pubDate>
      
      <guid>/posts/2022/08/policy-mode/</guid>
      <description>定义 策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
比如对于鸭子而言，不同鸭子的叫声方式可能不一样也可能一样，我们可以定义一个叫声行为接口，然后通过创建不同的叫声行为实现这个接口，在实例化鸭子时设定叫声行为即可。
这样相比于直接继承抽象鸭子后重写叫声行为方法，好处是减少了重复代码，而坏处是增加了类的数量。
代码展示 下面就以鸭子为例进行说明。
从接口开始 定义一个叫声接口：（其它接口省略）
1 2 3 public interface QuackBehavior { public void quack(); } 实现叫声接口 1 2 3 4 5 public class MuteQuack implements QuackBehavior { public void quack() { System.out.println(&amp;#34;&amp;lt;&amp;lt; Silence &amp;gt;&amp;gt;&amp;#34;); } } 其它接口省略。
创建抽象鸭子 每只鸭子都有Fly和Quack这两种行为。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public abstract class Duck { FlyBehavior flyBehavior; QuackBehavior quackBehavior; public Duck() { } public void setFlyBehavior(FlyBehavior fb) { flyBehavior = fb; } public void setQuackBehavior(QuackBehavior qb) { quackBehavior = qb; } abstract void display(); public void performFly() { flyBehavior.</description>
    </item>
    
    <item>
      <title>代理模式</title>
      <link>/posts/2022/08/proxy-pattern/</link>
      <pubDate>Fri, 26 Aug 2022 10:41:19 +0800</pubDate>
      
      <guid>/posts/2022/08/proxy-pattern/</guid>
      <description>定义 代理模式为另一个对象提供一个替身或占位符以控制对这个对象的访问。
我们对一个对象的使用或者一个对象中方法的调用，可以通过这个对象的代理人进行访问，这个代理人可以方便地控制这个对象，让对象的功能更为强大或更易于使用。
常见的代理有：远程代理，虚拟代理，动态代理。
远程代理 对于远程代理，其实就是本地调用远程的方法，本地堆（客户端）有一个Stub代理对象，这个对象负责完成RMI操作，也就是远程方法调用，而远程堆（服务端）有一个Skeleton代理对象，它接收客户端的RMI操作，并传递给真正的服务对象进行服务，之后再返回给客户端结果。
使用过程中需要注意调用的对象必须是可序列化的，无需序列化的对象可以添加transient关键字。通过rmiregistry &amp;amp;开启RMI，之后进行服务注册。服务端通过Naming.rebind()绑定服务地址，客户端通过Naming.lookup()调用远程方法。另外，远程传输对象需要继承于UnicastRemoteObject。
在Java5中，RMI和动态代理搭配使用，动态代理动态产生Stub，远程对象的Stub是Proxy实例，它是自动产生的，来处理所有把客户的本地调用变成远程调用的细节。
虚拟代理 对于虚拟代理，也就是说这个代理对象是虚拟的，由代理来扮演对象的替身。
比如对于从网络加载一副图像展现给用户，我们可能需要等待一定时间，这段时间内图像应该展现为用户友好的“等待中”字样，而在网络图像获取成功后进行网络图像的展现。
这个过程可以通过代理的方式方便地完成：虚拟代理对象扮演图像的替身，它通过创建一个线程加载网络图像，加载期间将图像动态地变为用户友好字样，完成加载后改为网络图像。
可以发现我们不是直接使用图像本身，而使用了代理对象作为图像，也就是说，代理扮演了图像这个角色。
下面是一个图像代理对象：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class ImageProxy implements Icon { volatile ImageIcon imageIcon; final URL imageURL; Thread retrievalThread; boolean retrieving = false; public ImageProxy(URL url) { imageURL = url; } public int getIconWidth() { .</description>
    </item>
    
    <item>
      <title>状态模式</title>
      <link>/posts/2022/08/status-mode/</link>
      <pubDate>Thu, 25 Aug 2022 22:54:26 +0800</pubDate>
      
      <guid>/posts/2022/08/status-mode/</guid>
      <description>定义 状态模式允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。
比如某个机器有各种复杂的状态，每个状态都着共同的参数，而这些参数值有区别。用户通过某些操作会改变机器的状态，机器转变状态后，以当前状态的方法给用户反馈。
代码展示 以机器的例子说明。
从接口开始 编写状态接口：
1 2 3 4 5 6 7 8 9 public interface State { public void insertQuarter(); public void ejectQuarter(); public void turnCrank(); public void dispense(); public void refill(); } 创建机器类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 package headfirst.</description>
    </item>
    
    <item>
      <title>组合模式</title>
      <link>/posts/2022/08/combination-mode/</link>
      <pubDate>Thu, 25 Aug 2022 21:58:13 +0800</pubDate>
      
      <guid>/posts/2022/08/combination-mode/</guid>
      <description>定义 组合模式允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。
对于菜单内容而言，假如只有简单的菜品项，那么通过迭代器可以轻松地遍历，但是如果菜单内容中含有子菜单，那么就需要组合模式了。
代码展示 下面就以菜单为例子展示组合模式。
从抽象开始 创建菜单组件：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public abstract class MenuComponent { public void add(MenuComponent menuComponent) { throw new UnsupportedOperationException(); } public void remove(MenuComponent menuComponent) { throw new UnsupportedOperationException(); } public MenuComponent getChild(int i) { throw new UnsupportedOperationException(); } public String getName() { throw new UnsupportedOperationException(); } public String getDescription() { throw new UnsupportedOperationException(); } public double getPrice() { throw new UnsupportedOperationException(); } public boolean isVegetarian() { throw new UnsupportedOperationException(); } public void print() { throw new UnsupportedOperationException(); } } 创建菜单 菜单本身是一个菜单组件，菜单继承于菜单组件，实现父类方法。</description>
    </item>
    
    <item>
      <title>迭代器模式</title>
      <link>/posts/2022/08/iterators-mode/</link>
      <pubDate>Thu, 25 Aug 2022 11:26:17 +0800</pubDate>
      
      <guid>/posts/2022/08/iterators-mode/</guid>
      <description>定义 迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
通过一个Iterator，可以方便地遍历各种类型，如HashMap，ArrayList等。
代码展示 下面通过菜单的例子进行说明。
分别用简单数组String[]和ArrayList&amp;lt;String&amp;gt;类创建菜单内容。
从接口开始 创建菜单接口：
1 2 3 public interface Menu { public Iterator&amp;lt;String&amp;gt; createIterator(); } 每个菜单都可以返回一个迭代器。
创建Diner菜单 该菜单用String[]创建内容，需要编写自己的迭代器。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class DinerMenu implements Menu { static final int MAX_ITEMS = 6; int numberOfItems = 0; String[] menuItems; public DinerMenu() { menuItems = new String[MAX_ITEMS]; addItem(&amp;#34;Vegetarian BLT&amp;#34;); addItem(&amp;#34;BLT&amp;#34;); addItem(&amp;#34;Soup of the day&amp;#34;); addItem(&amp;#34;Hotdog&amp;#34;); addItem(&amp;#34;Steamed Veggies and Brown Rice&amp;#34;); addItem(&amp;#34;Pasta&amp;#34;); } public void addItem(String name) { if (numberOfItems &amp;gt;= MAX_ITEMS) { System.</description>
    </item>
    
    <item>
      <title>模板方法模式</title>
      <link>/posts/2022/08/template-method-mode/</link>
      <pubDate>Wed, 24 Aug 2022 17:14:16 +0800</pubDate>
      
      <guid>/posts/2022/08/template-method-mode/</guid>
      <description>定义 模板方法模式在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。
“好莱坞”原则 别调用我们，我们会调用你。
其实就是防止“依赖腐败”，也就是要避免高层组件和低层组件相互依赖。一般由高层组件依赖低层组件。
代码展示 泡茶和泡咖啡有着几乎相同的步骤，但在某些子步骤中有差别。通过模板方法可以很好地解决问题。
定义模板方法 子步骤brew()和addCondiments()为抽象方法，由子类具体实现。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public abstract class CaffeineBeverage { final void prepareRecipe() { boilWater(); brew(); pourInCup(); addCondiments(); } abstract void brew(); abstract void addCondiments(); void boilWater() { System.out.println(&amp;#34;Boiling water&amp;#34;); } void pourInCup() { System.out.println(&amp;#34;Pouring into cup&amp;#34;); } } 定义具体方法 继承CaffeineBeverage并实现抽象方法。
1 2 3 4 5 6 7 8 public class Coffee extends CaffeineBeverage { public void brew() { System.</description>
    </item>
    
    <item>
      <title>外观模式</title>
      <link>/posts/2022/08/appearance-mode/</link>
      <pubDate>Tue, 23 Aug 2022 16:20:06 +0800</pubDate>
      
      <guid>/posts/2022/08/appearance-mode/</guid>
      <description>外观模式 定义 外观模式提供了一个统一的接口，用来访问子系统中的一群接口，外观定义了一个高层接口，让子系统更容易使用。
“最少知识”原则 减少对象之间的交互，只和“密友”谈话，也就是减少一个类所交互的类的数量。
代码展示 执行一些复杂操作需要一步步执行许多小操作，那么可以将复杂操作封装为一个高层类中的方法，将所有复杂操作需要用到的类作为高层类的成员，在复杂操作的方法中可以方便的调用各个类执行各自的功能。
下面是一个家庭影院的例子：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 public class HomeTheaterFacade { Amplifier amp; Tuner tuner; StreamingPlayer player; CdPlayer cd; Projector projector; TheaterLights lights; Screen screen; PopcornPopper popper; public HomeTheaterFacade(Amplifier amp, Tuner tuner, StreamingPlayer player, Projector projector, Screen screen, TheaterLights lights, PopcornPopper popper) { this.</description>
    </item>
    
    <item>
      <title>适配器模式</title>
      <link>/posts/2022/08/adapter-mode/</link>
      <pubDate>Tue, 23 Aug 2022 16:00:04 +0800</pubDate>
      
      <guid>/posts/2022/08/adapter-mode/</guid>
      <description>适配器模式 定义 适配器模式将一个类的接口，转换成客户期望的另一个接口，适配器让原本接口不兼容的类可以合作无间。
代码展示 鸭子和火鸡叫声不一样，通过编写适配器让火鸡适配鸭的方法。
从接口开始 1 2 3 4 public interface Duck { public void quack(); public void fly(); } 1 2 3 4 public interface Turkey { public void gobble(); public void fly(); } 编写适配器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class TurkeyAdapter implements Duck { Turkey turkey; public TurkeyAdapter(Turkey turkey) { this.turkey = turkey; } public void quack() { turkey.</description>
    </item>
    
    <item>
      <title>命令模式</title>
      <link>/posts/2022/08/command-mode/</link>
      <pubDate>Mon, 22 Aug 2022 11:41:33 +0800</pubDate>
      
      <guid>/posts/2022/08/command-mode/</guid>
      <description>定义 命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。
比如对于遥控器而已，我们会将操作封装为一个按钮（命令）对象，通过按下按钮执行操作。
代码展示 下面以遥控器作为例子：
从接口开始 命令接口：
1 2 3 public interface Command { public void execute(); } 定义操控对象 一个风扇对象：（其它对象省略了）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class Light { String location = &amp;#34;&amp;#34;; public Light(String location) { this.location = location; } public void on() { System.out.println(location + &amp;#34; light is on&amp;#34;); } public void off() { System.out.println(location + &amp;#34; light is off&amp;#34;); } } 定义操控对象的命令 操作风扇的命令：</description>
    </item>
    
    <item>
      <title>单件模式</title>
      <link>/posts/2022/08/singleton-pattern/</link>
      <pubDate>Mon, 22 Aug 2022 11:14:23 +0800</pubDate>
      
      <guid>/posts/2022/08/singleton-pattern/</guid>
      <description>我的思考 单件模式，容易知道需要某个对象是独一无二的，那么它首先应该是静态的，不能在程序动态运行期间被再次创建。
当在多个线程中用到它时，在创建时需要考虑线程安全问题，可通过加锁等方式解决。
代码实现 传统的单件 定义一个私有实例化的对象，把单件对象作为一个私有的静态成员变量，通过静态方法Singleton.getInstance()获取，若获取为null则创建对象。
1 2 3 4 5 6 7 8 9 10 11 12 public class Singleton { private static Singleton uniqueInstance; private Singleton() {} public static Singleton getInstance() { if (uniqueInstance == null) { uniqueInstance = new Singleton(); } return uniqueInstance; } } 线程安全的单件 传统的单件线程不安全，解决如下：
1 2 3 4 5 6 7 8 9 10 11 12 public class Singleton { private static Singleton uniqueInstance; private Singleton() {} public static synchronized Singleton getInstance() { if (uniqueInstance == null) { uniqueInstance = new Singleton(); } return uniqueInstance; } } 改善多线程性能 如上线程安全的代码，getInstance()在多次调用的情况下性能太低，改善方法如下：</description>
    </item>
    
    <item>
      <title>工厂模式</title>
      <link>/posts/2022/08/factory-mode/</link>
      <pubDate>Sun, 21 Aug 2022 23:31:45 +0800</pubDate>
      
      <guid>/posts/2022/08/factory-mode/</guid>
      <description>我的思考 工厂模式，包括工厂方法模式和抽象工厂模式。
对于工厂方法模式，工厂是一个抽象类，提供了一些默认实现方法和一些抽象方法，具体工厂继承于它，实现对应抽象方法。
假设有多家比萨店，他们提供不同口味的比萨，而都有相同的订购比萨的方法，那么可以定义一个抽象类，提供订购比萨的具体方法和创建比萨的抽象方法。
对于抽象工厂模式，工厂是一个接口，提供了一些具体工厂会用到的方法，同时还需要定义这些方法可能用到的接口。具体工厂需要首先实现抽象工厂定义的方法可能用到的接口，然后实现抽象工厂的所有方法。
假设有多家生产比萨配料的工厂，他们都有自己的独特的配料（实现所有配料接口），那么可以定义一个抽象工厂（一个接口），提供所有配料创建方法，具体工厂各自实现所有创建方法即可。
总之，他们的具体区别如下：
工厂方法模式使用继承，把对象的创建委托给子类，子类实现工厂方法来创建对象。 抽象工厂模式使用对象组合，对象的创建被实现在工厂接口所暴露出来的方法中。 工厂方法模式代码 从抽象开始 比萨店抽象类：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 public abstract class PizzaStore { abstract Pizza createPizza(String item); public Pizza orderPizza(String type) { Pizza pizza = createPizza(type); System.out.println(&amp;#34;--- Making a &amp;#34; + pizza.getName() + &amp;#34; ---&amp;#34;); pizza.prepare(); pizza.bake(); pizza.cut(); pizza.box(); return pizza; } } 具体的比萨店 芝加哥的比萨店：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class ChicagoPizzaStore extends PizzaStore { Pizza createPizza(String item) { if (item.</description>
    </item>
    
    <item>
      <title>装饰者模式</title>
      <link>/posts/2022/08/decorator-mode/</link>
      <pubDate>Sun, 21 Aug 2022 23:17:27 +0800</pubDate>
      
      <guid>/posts/2022/08/decorator-mode/</guid>
      <description>我的思考 装饰，如其名，就是对一个对象进行加工，包装，修饰。
假设一杯“普通的咖啡，价格10”，我们可以选择添加自己喜欢的配料。
首先我们添加牛奶，那么就变成了一杯“含牛奶配料的咖啡，价格2 +（价格12）”；
我想再加点巧克力，那么再往上包装变成“含巧克力的含牛奶配料的咖啡，价格3 +【价格2+（价格12）】”。
这么一层层封装上去就是装饰模式。
我们要在每一个配料中定义一个可包装的对象，在包装后返回这个对象。具体代码如下文。
代码实现 定义抽象类 饮料抽象类：
1 2 3 4 5 6 7 8 9 public abstract class Beverage { String description = &amp;#34;Unknown Beverage&amp;#34;; public String getDescription() { return description; } public abstract double cost(); } 配料抽象类：
注意这里配料也继承了饮料类，这样Beverage在通过包装之后还是返回一个Beverage，具体见测试代码。
1 2 3 4 public abstract class CondimentDecorator extends Beverage { Beverage beverage; public abstract String getDescription(); } 定义具体类 牛奶配料：（其他配料省略）
1 2 3 4 5 6 7 8 9 10 11 12 13 public class Milk extends CondimentDecorator { public Milk(Beverage beverage) { this.</description>
    </item>
    
    <item>
      <title>观察者模式</title>
      <link>/posts/2022/08/observer-mode/</link>
      <pubDate>Sun, 21 Aug 2022 22:59:33 +0800</pubDate>
      
      <guid>/posts/2022/08/observer-mode/</guid>
      <description>我的思考 对于观察者模式，既然有观察者，那么就首先有被观察者。
观察者可以通过订阅，监听等方式实现“观察”，被观察者需要通过通知，发消息之类的方式通知观察者接收信息。
假设有一个气象观测站，天气数据对象作为被观察者，各个气象观测站作为观察者订阅天气数据，而天气数据记录各个订阅了自己的观测站，以便于通知。具体代码实现如下文。
代码实现 定义接口 被观察者：
1 2 3 4 5 public interface Subject { public void registerObserver(Observer o); public void removeObserver(Observer o); public void notifyObservers(); } 观察者：
1 2 3 public interface Observer { public void update(float temp, float humidity, float pressure); } 定义对象实现接口 天气数据对象：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 public class WeatherData implements Subject { private List&amp;lt;Observer&amp;gt; observers; private float temperature; private float humidity; private float pressure; public WeatherData() { observers = new ArrayList&amp;lt;Observer&amp;gt;(); } public void registerObserver(Observer o) { observers.</description>
    </item>
    
    <item>
      <title>Quartz 实现定时任务</title>
      <link>/posts/2022/06/quartz-implements-timed-tasks/</link>
      <pubDate>Wed, 15 Jun 2022 21:11:27 +0800</pubDate>
      
      <guid>/posts/2022/06/quartz-implements-timed-tasks/</guid>
      <description>一、添加注解 主启动类添加@EnableScheduling注解；
二、添加依赖： 1 2 3 4 5 &amp;lt;!--定时任务 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-quartz&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 三、创建任务 /TestTask1.java
1 2 3 4 5 6 7 public class TestTask1 extends QuartzJobBean { @Override protected void executeInternal(JobExecutionContext context) { SimpleDateFormat sdf = new SimpleDateFormat(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;); System.out.println(&amp;#34;Test1---&amp;#34; + sdf.format(new Date())); } } /TestTask2.java
1 2 3 4 5 6 7 public class TestTask2 extends QuartzJobBean { @Override protected void executeInternal(JobExecutionContext context) { SimpleDateFormat sdf = new SimpleDateFormat(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;); System.</description>
    </item>
    
    <item>
      <title>Java 复习记录（一）</title>
      <link>/posts/2022/05/java-review-1/</link>
      <pubDate>Sun, 15 May 2022 15:15:51 +0800</pubDate>
      
      <guid>/posts/2022/05/java-review-1/</guid>
      <description>JDK JRE JVM 关系 为什么说 Java 语言“编译与解释并存”？ 高级编程语言按照程序的执行方式分为编译型和解释型两种。
编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码，不能跨平台。
解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行，一次编写，到处执行。
Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤。
由 Java 编写的程序需要先经过编译步骤，生成字节码（*.class 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。
因此，我们可以认为 Java 语言编译与解释并存。
重载（overload）和重写（override）的区别？ 方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。
重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；
重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。
方法重载的规则：
方法名一致，参数列表中参数的顺序，类型，个数不同。 重载与方法的返回值无关，存在于父类和子类，同类中。 可以抛出不同的异常，可以有不同修饰符。 抽象类(abstract class)和接口(interface)有什么区别？ 接口的方法默认是public，所有方法在接口中不能有实现(Java8开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。
接口中除了static、final变量，不能有其他变量，而抽象类中则不⼀定。
⼀个类可以实现多个接口，但只能实现⼀个抽象类。接口自己本身可以通过extends关键字扩展多个接口。
接口方法默认修饰符是public，抽象方法可以有public、protected和default这些修饰符（抽象方法就是为了被重写所以不能使用private关键字修饰）。
从设计层面来说，抽象是对类的抽象，是⼀种模板设计，而接口是对行为的抽象，是⼀种行为的规范。
注意jdk7~jdk9中接口的变化：
在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。 jdk 8 的时候接口可以有默认方法和静态方法功能。 jdk 9 在接口中引⼊了私有方法和私有静态方法 try和finally中的return 若try中有return，而finally中无return，会先将值暂存，无论finally语句中对该值做什么处理，最终返回的都是try语句中的暂存值。另外，finally语句中执行的语句先于try的return之前执行。
当try与finally语句中均有return语句，会忽略try中return，执行finally的return。注意如果try的return语句是return ++x，则++x是会执行的。
验证如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public class TryReturnTest { public int test1(int x) { try { x += 1; return ++x; } catch (Exception e) { e.</description>
    </item>
    
    <item>
      <title>Java 开发中遇到的 bug 记录</title>
      <link>/posts/2022/01/record-of-bugs-encountered-in-java-development/</link>
      <pubDate>Thu, 06 Jan 2022 17:23:00 +0800</pubDate>
      
      <guid>/posts/2022/01/record-of-bugs-encountered-in-java-development/</guid>
      <description>持续更新中。
BufferedWriter 无法正确写出问题 这是一段客户端代码，向服务器端发送消息，然后接收服务器端的回复：
1 2 3 4 5 6 7 8 9 10 11 12 13 try ( BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream())); BufferedWriter out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())) ) { String message; while((message = stdIn.readLine()) != null) { out.write(message); out.flush(); System.out.println(&amp;#34;Receive from server: &amp;#34; + in.readLine()); } } catch (Exception e) { System.out.println(e.getMessage()); } 这是服务端代码的一部分，接收客户端消息，并向客户端回复：
1 2 3 4 5 6 7 8 9 10 11 12 13 try ( BufferedReader in = new BufferedReader(new InputStreamReader(socket.</description>
    </item>
    
    <item>
      <title>Java 重写 equals 方法的同时为什么要重写 hashcode 方法</title>
      <link>/posts/2021/11/why-should-java-rewrite-the-hashcode-method-when-rewriting-the-equals-method/</link>
      <pubDate>Fri, 26 Nov 2021 09:23:27 +0800</pubDate>
      
      <guid>/posts/2021/11/why-should-java-rewrite-the-hashcode-method-when-rewriting-the-equals-method/</guid>
      <description>提出问题 先看一个例子：
当两个人年龄相同时，我们认为这两个对象相同：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Person { private int age; private String name; public Person(int age, String name) { this.age = age; this.name = name; } @Override public String toString() { return &amp;#34;Person{&amp;#34; + &amp;#34;age=&amp;#34; + age + &amp;#34;, name=&amp;#39;&amp;#34; + name + &amp;#39;\&amp;#39;&amp;#39; + &amp;#39;}&amp;#39;; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() !</description>
    </item>
    
    <item>
      <title>Linux 上部署 JAR 包项目后的文件上传问题</title>
      <link>/posts/2021/11/file-upload-problem-after-deploying-jar-package-project-on-linux/</link>
      <pubDate>Wed, 03 Nov 2021 00:38:12 +0800</pubDate>
      
      <guid>/posts/2021/11/file-upload-problem-after-deploying-jar-package-project-on-linux/</guid>
      <description>在进行上传文件时，一般会先获取项目类路径：
1 2 File relativePathFile = new File(URLDecoder.decode(ResourceUtils.getURL(&amp;#34;classpath:&amp;#34;).getPath(), &amp;#34;utf-8&amp;#34;)); String absolutePath = relativePathFile.getAbsoluteFile().getPath(); 首先取得相对路径，再进一步取得绝对路径，结果如下：
如果单纯运行一个java项目： 获得路径为：
${project}/target/classes
如果是运行jar包，且是在Linux系统上，则获得路径大致为： .../${jar包名}!/BOOT-INF/classes! [centos7.9下]
所以如果是jar包启动并上传文件，则无法正确放到类路径下。
所以需指定新的上传路径。
在如下路径中：
1 2 [root@VM-0-11-centos app]# ls application.yaml LonersHub-0.0.1-SNAPSHOT.jar static 假设我要把文件上传到和jar包同一路径下的static内, 可以在jar包同一路径下新建并编辑application.yaml文件如下：
1 2 3 4 5 spring: resources: static-locations: - classpath:static/ - file:/app/static/ 然后在文件上传是指定上传路径即可。
这里编写一个工具类如下：
关注getUploadPath方法，它用于获取上传路径。
首先，为了方便后期维护和部署使用，我们先判断项目运行所在的操作系统，如果是生产环境linux则上传到上面指定的目录，而如果是本地测试项目，则将其上传到类路径下的默认位置即可。
比如，要上传一个头像：
linux下： 返回/app/static/${uploadType}/${fileName}
e.g. /app/static/avatar/test.jpg
window下： 返回 ${project}/target/classes/static/${uploadType}/${fileName}
e.g. ${project}/target/classes/static/avatar/test.jpg
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 public class FileUtils { /** * @description: 获取上传路径 * @author Jiang Zhihang * @date 2022/1/2 23:32 * @param type 上传类型，如avatar，video * @param fileName 上传文件的名称 */ public static String getUploadPath(String type, String fileName) throws FileNotFoundException, UnsupportedEncodingException { String osName = System.</description>
    </item>
    
    <item>
      <title>Linux 主机部署 springboot 项目全过程</title>
      <link>/posts/2021/11/the-whole-process-of-linux-host-deployment-springboot-project/</link>
      <pubDate>Wed, 03 Nov 2021 00:30:25 +0800</pubDate>
      
      <guid>/posts/2021/11/the-whole-process-of-linux-host-deployment-springboot-project/</guid>
      <description>注：部署环境为centos7.9版本
配置环境 配好mysql，redis，java开发环境。
上传JAR包项目 1 2 mvn clean mvn package 即可把项目打包为JAR包，再通过WINSP上传到服务器。
先新建一个app文件夹，放置项目所有内容：
1 2 mkdir /app chmod 777 /app 新建并编辑application配置文件 由于主机上的mysql密码与本地mysql密码不同，所以在JAR包同一个文件目录下新建application配置文件并指定新的密码，允许JAR项目时该application配置文件优先级是更高的。这里我还指定了用于linux下文件读取上传的目录路径。
1 2 3 4 5 6 7 spring: datasource: password: ...... resources: static-locations: - classpath:static/ - file:/app/static/ 1 2 3 [root@VM-0-11-centos app]# chmod -R 777 * [root@VM-0-11-centos app]# ls application.yaml LonersHub-0.0.1-SNAPSHOT.jar static 运行项目 首先确保防火墙配置正确，放通需要的端口。
1 2 [root@VM-0-11-centos app]# nohup java -jar LonersHub-0.0.1-SNAPSHOT.jar &amp;amp; [1] 27108 更新项目 首先终止原本进程，删除原来的jar包并上传新的jar包，然后运行新的jar包：
1 2 3 4 5 6 7 [root@VM-0-11-centos app]# ps -ef | grep java root 13415 1 1 00:02 ?</description>
    </item>
    
    <item>
      <title>Synchronized 到底锁了谁</title>
      <link>/posts/2021/05/who-the-hell-is-synchronized-locking/</link>
      <pubDate>Wed, 19 May 2021 22:43:45 +0800</pubDate>
      
      <guid>/posts/2021/05/who-the-hell-is-synchronized-locking/</guid>
      <description>Synchronized方法 静态方法上的锁
静态方法是属于“类”，不属于某个实例，是所有对象实例所共享的方法。也就是说如果在静态方法上加入synchronized，那么它获取的就是这个类的锁，锁住的就是这个类。
普通方法上的锁
实例方法并不是类所独有的，每个对象实例独立拥有它，它并不被对象实例所共享。在实例方法上加入synchronized，那么它获取的就是这个类的锁，锁住的就是这个对象实例。
Synchronized代码块 synchronized(this){...} this关键字所代表的意思是该对象实例，这种用法synchronized锁住的是对象实例。
synchronized(Demo.class){...} 锁的是该类。
synchronized(obj){...} synchronized同步代码块对对象内部的实例加锁。
假设demo1与demo2方法不相关，此时两个线程对同一个对象实例分别调用demo1与demo2，均能获取各自的锁。
代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class Demo { private Object lock1 = new Object(); private Object lock2 = new Object(); public void demo1() { synchronized (lock1) { while (true) { //死循环目的是为了让线程一直持有该锁 System.out.println(Thread.currentThread()); } } } public void demo2() { synchronized (lock2) { while (true) { System.</description>
    </item>
    
    <item>
      <title>Java 与 C&#43;&#43; 中的值传递和引用传递解析</title>
      <link>/posts/2021/05/value-passing-and-reference-passing-parsing-in-java-and-c/</link>
      <pubDate>Sat, 01 May 2021 20:16:39 +0800</pubDate>
      
      <guid>/posts/2021/05/value-passing-and-reference-passing-parsing-in-java-and-c/</guid>
      <description>先说结论：Java只有值传递，而C++既有值传递又有引用传递。
Java的参数传递 先定义3个方法如下：
1 2 3 4 5 6 7 8 9 10 11 public static void change1(String str, int num) { str = &amp;#34;world&amp;#34;; // 这里就相当与新new了一个对象! num = 100; } public static void change2(User user) { user.age = 1; user.name = &amp;#34;mary&amp;#34;; } public static void change3(User user) { user = new User(1, &amp;#34;mary&amp;#34;); } 进行测试：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public static void main(String[] args) { String str = &amp;#34;hello&amp;#34;; int num = 1; System.</description>
    </item>
    
    <item>
      <title>equals 方法和 == 运算符的作用区别</title>
      <link>/posts/2020/11/the-difference-between-the-equals-method-and-the---operator/</link>
      <pubDate>Wed, 25 Nov 2020 00:21:05 +0800</pubDate>
      
      <guid>/posts/2020/11/the-difference-between-the-equals-method-and-the---operator/</guid>
      <description>equals方法与&amp;quot;==&amp;ldquo;的比较与分析 首先提出一个重要的点:
== 比较时进行地址的比较
equals 比较时进行值的比较
1 2 3 4 5 6 7 8 9 String a = &amp;#34;123&amp;#34;; String b = &amp;#34;123&amp;#34;; System.out.println(a.equals(b)); // true System.out.println(a == b); // true String a1 = new String(&amp;#34;123&amp;#34;); String b1 = new String(&amp;#34;123&amp;#34;); System.out.println(a1.equals(b1)); // true System.out.println(a1 == b1); // false 好像没问题。
然而阅读源码Object类，可以发现对象中默认equals方法进行的是地址的比较
1 2 3 public boolean equals(Object obj) { return (this == obj); } 再阅读源码String类，可以发现String类中重写了equals方法，覆盖掉了Object的equals方法，所以String的equals是值比较！
1 2 3 4 5 6 7 8 9 10 11 12 13 public boolean equals(Object anObject) { if (this == anObject) { return true; } if (anObject instanceof String) { String aString = (String)anObject; if (coder() == aString.</description>
    </item>
    
  </channel>
</rss>
