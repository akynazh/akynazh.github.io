<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on Norwegian Wood</title>
    <link>https://akynazh.site/tags/hugo/</link>
    <description>Recent content in hugo on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>akynazh@qq.com (Jzh)</managingEditor>
    <webMaster>akynazh@qq.com (Jzh)</webMaster>
    <copyright>Cactus/Jzh</copyright>
    <lastBuildDate>Thu, 02 Feb 2023 18:49:54 +0800</lastBuildDate><atom:link href="https://akynazh.site/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo 实现深浅主题的切换</title>
      <link>https://akynazh.site/posts/2023/02/hugo-realizes-switching-between-deep-and-shallow-themes/</link>
      <pubDate>Thu, 02 Feb 2023 18:49:54 +0800</pubDate>
      <author>akynazh@qq.com (Jzh)</author>
      <guid>https://akynazh.site/posts/2023/02/hugo-realizes-switching-between-deep-and-shallow-themes/</guid>
      <description>实现深浅主题切换的方法不只一种，这里记录我所使用的一种。
生成深浅主题对应的 css 文件 配置入口文件 我的博客通过 sass 构建样式，可以将写好的 scss 文件组合生成一个 css 文件。
而组合成为 css 文件需要一个入口文件，在入口文件里指定主题。
比如我在 assets/scss/colors 中指定了两种色调 dark.scss 和 light.scss, 那么可以在对应的入口文件中 import:
1// assets/scss/styles_dark.scss 2@import &amp;#34;colors/dark&amp;#34;; 3 4@import &amp;#34;variables&amp;#34;; 5@import &amp;#34;util&amp;#34;; 6@import &amp;#34;mixins&amp;#34;; 7// ... 1// assets/scss/styles_light.scss 2@import &amp;#34;colors/light&amp;#34;; 3 4@import &amp;#34;variables&amp;#34;; 5@import &amp;#34;util&amp;#34;; 6@import &amp;#34;mixins&amp;#34;; 7// ... 这样，就有了 styles_dark.scss 和 styles_light.scss 这两个入口文件。
通过 hugo 生成目标文件 接着，在 &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; 中指定入口文件进行操作：
1&amp;lt;!-- head.html --&amp;gt; 2{{ $opts := (dict &amp;#34;targetPath&amp;#34; &amp;#34;css/styles_dark.css&amp;#34; &amp;#34;outputStyle&amp;#34; &amp;#34;compressed&amp;#34;) }} 3{{ $styles_dark := resources.</description>
    </item>
    
    <item>
      <title>Hugo 通过 Algolia 添加站内搜索功能</title>
      <link>https://akynazh.site/posts/2022/07/hugo-adds-onsite-search-function-through-algolia/</link>
      <pubDate>Wed, 20 Jul 2022 23:46:01 +0800</pubDate>
      <author>akynazh@qq.com (Jzh)</author>
      <guid>https://akynazh.site/posts/2022/07/hugo-adds-onsite-search-function-through-algolia/</guid>
      <description>注册账号并创建Index 官网链接：Algolia，注册完成后保存好ApiID和ApiKey。
接着，创建一个Index，保存好Index的名称。
数据生成以及上传Algolia 方法一：通过hugo-algolia插件的方式 一、下载hugo-algolia： npm install -g hugo-algolia
二、编写config.yaml
网站根目录下创建config.yaml，编写参数如下：
1--- 2algolia: 3 index: &amp;#34;{indexName}&amp;#34; 4 key: &amp;#34;{key}&amp;#34; 5 appID: &amp;#34;{appID}&amp;#34; 6--- 三、生成algolia.json
网站根目录下运行： hugo-algolia -s，即可生成 {site}/public/algolia.json，同时该数据也同步到了algolia账户下，可以去官网查看。
四、前往algolia的indices进行搜索类型的设置
可以选择按tag，category，content等内容进行搜索，并指定优先级。
方法二：通过GithubAction的方式 这里不通过插件而是通过hugo定制化地生成algolia.json，然后通过GithubAction在每次push时上传数据。
个人更推荐这样做，更好定制化且方便。同时上面方法一有个bug，对中文数据好像不支持。
一、配置algolia输出文件 1outputs: 2home: 3 - HTML 4 - RSS 5 - Algolia 6outputFormats: 7Algolia: 8 mediaType: application/json 9 baseName: algolia 10 isPlainText: true 二、生成algolia.json 编辑 {site}/themes/layouts/_default/list.algolia.json 如下：
1[ 2 {{- range $index, $entry := .Site.RegularPages }} 3 {{- if $index }}, {{ end }} 4 { 5 &amp;#34;objectID&amp;#34;: &amp;#34;{{ .</description>
    </item>
    
  </channel>
</rss>