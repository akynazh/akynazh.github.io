<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Norwegian Wood</title>
    <link>https://akynazh.site/tags/git/</link>
    <description>Recent content in git on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>akynazh@qq.com (Jzh)</managingEditor>
    <webMaster>akynazh@qq.com (Jzh)</webMaster>
    <copyright>Cactus &amp; Jzh</copyright>
    <lastBuildDate>Tue, 06 Dec 2022 11:42:39 +0800</lastBuildDate><atom:link href="https://akynazh.site/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git 版本与提交管理</title>
      <link>https://akynazh.site/posts/2022/12/git-version-and-submission-management/</link>
      <pubDate>Tue, 06 Dec 2022 11:42:39 +0800</pubDate>
      <author>akynazh@qq.com (Jzh)</author>
      <guid>https://akynazh.site/posts/2022/12/git-version-and-submission-management/</guid>
      <description>关于HEAD HEAD 代表当前分支的最新提交名称，它可以由一些修饰符进行修饰进而产生不同的含义。
关于 HEAD~{n}
~ 是用来在当前提交路径上回溯的修饰符。
HEAD~{n} 表示当前所在的提交路径上的前 n 个提交（n &amp;gt;= 0）：
HEAD = HEAD~0 （即当前最新的一次commit） HEAD~ = HEAD~1 HEAD~~ = HEAD~2 关于 HEAD^{n}
^ 是用来切换父级提交路径的修饰符。
当我们始终在一个分支比如 dev 开发/提交代码时，每个 commit 都只会有一个父级提交，就是上一次提交。此时 HEAD~1 等价于 HEAD^。
当并行多个分支开发，feat1, feat2, feat3，完成后 merge feat1 feat2 feat3 回 dev 分支后，此次的 merge commit 就会有多个父级提交。
HEAD^ = HEAD^1 第一个父级提交 HEAD^2~1 第二个父级提交的上一次提交 强行覆盖本地分支（不关心本地修改） 若在其它分支上进行了修改，而本地也有了一定的修改，但本地的修改是可以忽略的（或者你不小心放入了一些无关文件），那么，这时你很需要用强行覆盖这个操作。
1git fetch 2git reset --hard HEAD 3git merge origin/$CURRENT_BRANCH # 若已做映射：git merge 修改提交过的版本 修改上次提交 这里对提交的信息和作者进行修改，注意邮箱两侧由&amp;lt;&amp;gt;包括住</description>
    </item>
    
    <item>
      <title>Git 配置记录</title>
      <link>https://akynazh.site/posts/2022/10/git-configuration-record/</link>
      <pubDate>Thu, 13 Oct 2022 21:40:46 +0800</pubDate>
      <author>akynazh@qq.com (Jzh)</author>
      <guid>https://akynazh.site/posts/2022/10/git-configuration-record/</guid>
      <description>Git 初始化 1git config --global user.name &amp;#34;akynazh&amp;#34; 2git config --global user.email &amp;#34;akynazh@qq.com&amp;#34; 3# git config pull.rebase false 配置 Http 代理 1git config --global http.https://github.com.proxy socks5://127.0.0.1:7890 配置 SSH 代理 1# ~/.ssh/config 2 3Host github.com 4 User git 5 Port 22 6 Hostname github.com 7 IdentityFile ~/.ssh/id_rsa 8 ProxyCommand connect -S 127.0.0.1:7890 -a none %h %p 9 10Host ssh.github.com 11 User git 12 Port 443 13 Hostname ssh.github.com 14 IdentityFile ~/.ssh/id_rsa 15 ProxyCommand connect -S 127.</description>
    </item>
    
    <item>
      <title>Git 快速初始化操作</title>
      <link>https://akynazh.site/posts/2021/12/git-quick-initialization-operation/</link>
      <pubDate>Fri, 10 Dec 2021 18:10:07 +0800</pubDate>
      <author>akynazh@qq.com (Jzh)</author>
      <guid>https://akynazh.site/posts/2021/12/git-quick-initialization-operation/</guid>
      <description>git初次拉取远程仓库 首先从github建立一个仓库，获取仓库地址url，然后进入项目所在文件夹，运行以下代码：
1&amp;gt; git init # 初始化仓库，生成.git文件 2 3&amp;gt; git add . # 将项目文件的修改信息添加到.git内的一个暂存区（index） 4 5&amp;gt; git commit -m “init” # 将暂存区的修改信息提交到分支 6 7&amp;gt; git remote add origin ${url} # 添加远程仓库 8 9&amp;gt; git push origin master # 将本地分支推送到远程仓库 这里执行完 git commit -m &amp;quot;init&amp;quot; 后，我们查看一下本地分支信息：
1&amp;gt; git branch 2* master 可见git自动为我们本地创建了一个master分支。
执行完 git push origin master 后，我们查看一下本地分支与远程分支的映射关系：
1&amp;gt; git branch -a 2* master 3 remotes/origin/master 4 5&amp;gt; git branch -vv 6* master 3a31f4c init 可见并没有产生映射。</description>
    </item>
    
  </channel>
</rss>