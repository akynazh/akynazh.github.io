<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>windows on Norwegian Wood</title>
    <link>https://akynazh.site/tags/windows/</link>
    <description>Recent content in windows on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Jzh</copyright>
    <lastBuildDate>Wed, 03 Aug 2022 23:34:36 +0800</lastBuildDate><atom:link href="https://akynazh.site/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Batch 基本编写方法记录</title>
      <link>https://akynazh.site/posts/2022/08/batch-basic-compilation-method-record/</link>
      <pubDate>Wed, 03 Aug 2022 23:34:36 +0800</pubDate>
      
      <guid>https://akynazh.site/posts/2022/08/batch-basic-compilation-method-record/</guid>
      <description>读取输入 1set /p ch=&amp;#34;y/n:&amp;#34; 2echo %ch% 变量运算 通过%{var}%访问变量，通过/a进行表达式计算设置值。
1@echo off 2 3set money=100 4echo 初始金额： %money% 5 6set /a money=%money%*2 7set /a money=%money%+100 8echo 现在的金额：%money% 选择并跳转 :{point} 用于指定一个跳转点。
1@echo off 2 3set /p ch=&amp;#34;y/n:&amp;#34; 4if &amp;#34;%ch%&amp;#34;==&amp;#34;&amp;#34; ( 5 goto end 6) else if &amp;#34;%ch%&amp;#34;==&amp;#34;n&amp;#34; ( 7 goto no 8) else if &amp;#34;%ch%&amp;#34;==&amp;#34;y&amp;#34; ( 9 goto yes 10) else ( 11 goto end 12) 13 14:no 15echo NO 16goto end 17 18:yes 19echo YES 20goto end 21 22:end 循环语句 通过%%x设置和访问循环值； 通过(start, steps, end)设置循环； /l 将通过比较start和end来执行迭代。 1@echo off 2 3for /l %%x in (1, 5, 100) do ( 4 echo hello, jzh-%%x 5) 变量动态变化 setlocal enabledelayedexpansion开启变量延迟，使得变量可以动态变化; 需通过!</description>
    </item>
    
    <item>
      <title>Wsl 主要操作记录</title>
      <link>https://akynazh.site/posts/2022/07/wsl-main-operation-records/</link>
      <pubDate>Sat, 23 Jul 2022 17:34:52 +0800</pubDate>
      
      <guid>https://akynazh.site/posts/2022/07/wsl-main-operation-records/</guid>
      <description>wsl在window开机后自启ssh服务 wsl下创建脚本，执行：vim /etc/init.wsl，并根据需要写入服务：
1/etc/init.d/${需要的服务} # 或者使用service/systemctl命令 再赋予init.wsl执行权限，执行：chmod +x /etc/init.wsl
window下在启动目录下创建脚本：wsl.bat，写入开机命令如下：
1wsl -d &amp;lt;DistributionName&amp;gt; -u root /etc/init.wsl 其中，版本通过wsl -l查看。
wsl一些常用命令 wsl ~ -u jzh: 以jzh用户登录并进入用户文件夹 wsl --shutdown: 关闭wsl wsl -l -v: 查看已安装的wsl版本 wsl --status: 检查wsl状态 wsl -l --online: 查看可通过在线商店获得的 Linux 发行版列表 wsl修改默认登录用户 &amp;lt;DistributionName&amp;gt; config --default-user root: 将登录默认用户设为root
手动安装wsl的话可能无法生效，可通过修改/etc/wsl.conf完成：
1# Set the user when launching a distribution with WSL. 2[user] 3default = root 然后重启wsl即可完成。
切换wsl1和wsl2 1wsl --set-version &amp;lt;distribution name&amp;gt; &amp;lt;versionNumber&amp;gt; &amp;lt;versionNumber&amp;gt;值为1或2，对应wsl1和wsl2。
升级ubuntu发行版本 1apt update 2apt upgrade 3do-release-upgrade -d 升级wsl的linux内核版本 1wsl --update 可以使用wsl --update rollback 命令回滚到内核的上一版本。</description>
    </item>
    
    <item>
      <title>Wsl 自定义安装位置</title>
      <link>https://akynazh.site/posts/2022/07/wsl-custom-installation-location/</link>
      <pubDate>Sat, 23 Jul 2022 17:27:31 +0800</pubDate>
      
      <guid>https://akynazh.site/posts/2022/07/wsl-custom-installation-location/</guid>
      <description>自定义wsl安装位置 下载wsl-ubuntu： 20.04版本：https://aka.ms/wslubuntu2004 18.04版本：https://aka.ms/wsl-ubuntu-1804 其他版本自行前往官网查找。
修改后缀名 下载后得到AppxBundle文件，将后缀名改为zip，然后解压。
解压后得到如下内容：
选择x64或ARM64的安装包均可均可，将后缀名改为zip，然后解压。
开始安装wsl-ubuntu 解压后得到如下内容：
双击ubuntu.exe，即可开始安装wsl-ubuntu。
安装完成后在该目录下得到虚拟盘：
注：虚拟盘也可能变成rootfs文件。
登录wsl 安装时会让你指定用户名和密码，这个用户是默认添加到sudoers里的。
如果想用root登录，通过sudo passwd root可以设置root密码（root刚开始没有密码），接着通过su即可登录root。
From My Blog: akynazh.
Over.</description>
    </item>
    
    <item>
      <title>Window 添加命令别名的方法</title>
      <link>https://akynazh.site/posts/2022/06/how-to-add-command-alias-in-window/</link>
      <pubDate>Fri, 24 Jun 2022 22:52:59 +0800</pubDate>
      
      <guid>https://akynazh.site/posts/2022/06/how-to-add-command-alias-in-window/</guid>
      <description>前言 下面将介绍3种方法：
CMD添加别名的方法 PowerShell添加别名的方法 通过添加环境变量的方式设置别名 CMD添加别名的方法 设置临时的别名 可以通过doskey命令实现。
1doskey ls=echo ====== ^&amp;amp;^&amp;amp; dir /b $* ^&amp;amp;^&amp;amp; echo ====== $*表示还可能有其他命令参数，^&amp;amp;^&amp;amp;用于分开多条命令。
单纯在一个cmd窗口中使用doskey设置别名，别名只能在该窗口中使用。
设置永久的别名 可以通过将doskey命令写入bat脚本，再把脚本路径添加到注册表Autorun实现永久且所有cmd都可用的别名，具体步骤如下：
编写脚本： 1@echo off 2doskey ls=dir /b $* 3doskey lss=echo ====== ^&amp;amp;^&amp;amp; dir /b $* ^&amp;amp;^&amp;amp; echo ====== 添加路径到注册表 在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor下的Autorun中，将数值设为doskey命令脚本所在的路径即可。这样所有用户都可以使用设置好的别名。
也可在HKEY_CURRENT_USER下的对应位置设置，只针对当前用户设置别名。
优缺点 通过doskey的方式，挺方便的，但是在命令非常多的情况下不是很方便，同时，设置的命令还不可以在powershell下运行。
PowerShell添加别名的方法 为PowerShell设置临时的别名 1PS C:\Users\akyna&amp;gt; set-alias escc esc 2PS C:\Users\akyna&amp;gt; escc 3...... 如果带参数，则可以通过function进行：
1PS C:\Users\akyna&amp;gt; function func{nircmd emptybin} 2PS C:\Users\akyna&amp;gt; set-alias ctrash func 3PS C:\Users\akyna&amp;gt; ctrash 这样的别名只是在当前会话下有效，开启另一个shell就失效了。</description>
    </item>
    
    <item>
      <title>Window 实用命令记录之进程与网络控制</title>
      <link>https://akynazh.site/posts/2022/04/process-and-network-control-of-window-practical-command-recording/</link>
      <pubDate>Mon, 18 Apr 2022 23:10:39 +0800</pubDate>
      
      <guid>https://akynazh.site/posts/2022/04/process-and-network-control-of-window-practical-command-recording/</guid>
      <description>进程相关 tasklist tasklist用于查看运行的进程 findstr相当于linux的grep 1PS C:\Users\akyna&amp;gt; Tasklist | findstr Code 2Code.exe 19184 Console 1 94,012 K 3Code.exe 19300 Console 1 26,324 K 4...... taskkill 使用该工具按照进程 ID (PID) 或映像名称终止任务。
参数列表:
/PID processid 指定要终止的进程的 PID。 /IM imagename 指定要终止的进程的映像名称。 /T 终止指定的进程和由它启用的子进程。 /F 指定强制终止进程。 /? 显示帮助消息。 e.g.
1TASKKILL /IM notepad.exe 2TASKKILL /PID 1230 /PID 1241 /PID 1253 /T 3TASKKILL /F /IM cmd.exe /T 网络相关 ipconfig 执行网卡相关操作
1$ ipconfig # 查看网卡信息，如ip地址 2$ ipconfig /all # 查看mac地址 3 4$ ipconfig /displaydns # 查看dns缓存内容 5$ ipconfig /flushdns # 清除dns缓存 ping 测试本机与指定机器是否联通</description>
    </item>
    
    <item>
      <title>Window 增加右键打开选项</title>
      <link>https://akynazh.site/posts/2021/11/add-right-click-open-option-in-window/</link>
      <pubDate>Sat, 20 Nov 2021 18:10:30 +0800</pubDate>
      
      <guid>https://akynazh.site/posts/2021/11/add-right-click-open-option-in-window/</guid>
      <description>加入注册表界面 win+R
regedit
增加右键操作文件选项 以vscode作为编辑文件实例 注册表页面下进入：
计算机\HKEY_CLASSES_ROOT*\shell
新建项 Vscode
右键Vscode并新建项command
编辑command默认选项值为： ${vscodepath}\Code.exe %1 %1是可选的参数，这里必须要加，表示作用于该文件。
编辑Vscode值
编辑右键显示名称：默认值改为Open with vscode （不编辑则为新建项的名称）
编辑右键显示图标：新建字符串值icon 添加：${vscodepath}\Code.exe (有些可以这样，但一般为ico文件)
增加目录下右键打开选项 以window terminal作为实例 注册表页面下进入：
计算机\HKEY_CLASSES_ROOT\Directory\Background\shell
新建项 Terminal
右键Terminal 新建项command
编辑command默认选项值为：${terminalpath}\wt.exe 编辑Terminal值
编辑右键显示名称：默认值改为Open in terminal （不编辑则为新建项的名称）
编辑右键显示图标：新建字符串值icon 添加：${terminalicon}
编辑window terminal的json配置文件
对应位置修改如下，&amp;quot;.&amp;ldquo;即表示当前目录。 1 &amp;#34;profiles&amp;#34;: 2 { 3 &amp;#34;defaults&amp;#34;: 4 { 5 &amp;#34;startingDirectory&amp;#34; : &amp;#34;.&amp;#34; 6 }, 7 ... 8 } over</description>
    </item>
    
    <item>
      <title>Window 实用命令记录之文件操作</title>
      <link>https://akynazh.site/posts/2021/04/file-operation-recorded-by-window-utility-command/</link>
      <pubDate>Mon, 19 Apr 2021 13:48:19 +0800</pubDate>
      
      <guid>https://akynazh.site/posts/2021/04/file-operation-recorded-by-window-utility-command/</guid>
      <description>创建文件或文件夹 cmd下创建文件 1type nul &amp;gt; test.jpg powershell下创建文件 1new-item test.jpg 创建文件夹 1mkdir test 重命名文件 注意不能指定到新的路径。
1PS D:\a\tmp\test&amp;gt; ren test.txt my.txt 移动文件 该命令也可用于重命名。
1PS D:\a\tmp\test&amp;gt; move test.jpg mydir 复制文件和文件夹 copy无法递归复制，而xcopy可以。
1PS D:\a\tmp\test\mydir&amp;gt; copy test.jpg test1.jpg 1# mydir not empty 2PS D:\a\tmp\test&amp;gt; copy mydir mydir1 3PS D:\a\tmp\test&amp;gt; ls mydir1 4# empty 5 6PS D:\a\tmp\test&amp;gt; xcopy mydir mydir2 7目标 mydir2 是文件名 8还是目录名 9(F = 文件，D = 目录)? D 10mydir\test.jpg 11mydir\test1.jpg 12复制了 2 个文件 删除文件或文件夹 del 删除文件。powershell可以使用rm。</description>
    </item>
    
  </channel>
</rss>