<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tool on Norwegian Wood</title>
    <link>/categories/tool/</link>
    <description>Recent content in Tool on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Jzh</copyright>
    <lastBuildDate>Fri, 13 Jan 2023 21:43:06 +0800</lastBuildDate><atom:link href="/categories/tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clash-Linux 配置使用记录</title>
      <link>/posts/2023/01/clash-linux-configuration-usage-record/</link>
      <pubDate>Fri, 13 Jan 2023 21:43:06 +0800</pubDate>
      
      <guid>/posts/2023/01/clash-linux-configuration-usage-record/</guid>
      <description>安装 1wget https://github.com/Dreamacro/clash/releases/download/v1.11.8/clash-linux-amd64-v1.11.8.gz 2gzip -d clash-linux-amd64-v1.11.8.gz 3sudo mv clash-linux-amd64-v1.11.8 /usr/bin/clash 4chmod +x /usr/bin/clash 获取订阅链接并配置 在自己使用的机场中获取clash订阅链接，然后下载配置文件到 ~/.config/clash/config.yaml:
1mkdir -p ~/.config/clash 2cd ~/.config/clash 3wget -O config.yaml {link} 4 5vim config.yaml 6 7# 不允许局域网中其它电脑使用该代理 8allow-lan: false 9# 设置 clash 管理界面密码 10secret: your password 11# 允许从外部访问 clash 管理界面，其中端口 9090 可自行配置 12external-controller: &amp;#39;0.0.0.0:9090&amp;#39; 运行代理并选择节点 1# 第一次需要下载Country.mmdb，可考虑先运行以下命令 2# clash -f ~/.config/clash/config.yaml 3 4nohup clash -f ~/.config/clash/config.yaml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp; 登录clash管理界面进行网速的测试和节点的切换：
访问clash.razord.top，设置Host为主机IP，端口默认为9090，密钥为刚刚配置的密码。
最后设置proxy环境变量，可通过alias进行配置以方便使用。
实现开机自启动 vim /etc/systemd/system/clash.service
1[Unit] 2Description=Clash Proxy 3 4[Service] 5WorkingDirectory=/root 6ExecStart=/usr/bin/clash -f .</description>
    </item>
    
    <item>
      <title>Git 版本与提交管理</title>
      <link>/posts/2022/12/git-version-and-submission-management/</link>
      <pubDate>Tue, 06 Dec 2022 11:42:39 +0800</pubDate>
      
      <guid>/posts/2022/12/git-version-and-submission-management/</guid>
      <description>关于HEAD HEAD 代表当前分支的最新提交名称，它可以由一些修饰符进行修饰进而产生不同的含义。
关于 HEAD~{n}
~ 是用来在当前提交路径上回溯的修饰符。
HEAD~{n} 表示当前所在的提交路径上的前 n 个提交（n &amp;gt;= 0）：
HEAD = HEAD~0 （即当前最新的一次commit） HEAD~ = HEAD~1 HEAD~~ = HEAD~2 关于 HEAD^{n}
^ 是用来切换父级提交路径的修饰符。
当我们始终在一个分支比如 dev 开发/提交代码时，每个 commit 都只会有一个父级提交，就是上一次提交。此时 HEAD~1 等价于 HEAD^。
当并行多个分支开发，feat1, feat2, feat3，完成后 merge feat1 feat2 feat3 回 dev 分支后，此次的 merge commit 就会有多个父级提交。
HEAD^ = HEAD^1 第一个父级提交 HEAD^2~1 第二个父级提交的上一次提交 强行覆盖本地分支（不关心本地修改） 若在其它分支上进行了修改，而本地也有了一定的修改，但本地的修改是可以忽略的（或者你不小心放入了一些无关文件），那么，这时你很需要用强行覆盖这个操作。
1git fetch 2git reset --hard HEAD 3git merge origin/$CURRENT_BRANCH # 若已做映射：git merge 修改提交过的版本 修改上次提交 这里对提交的信息和作者进行修改，注意邮箱两侧由&amp;lt;&amp;gt;包括住</description>
    </item>
    
    <item>
      <title>Linux 软件安装和配置记录</title>
      <link>/posts/2022/11/linux-software-installation-and-configuration-records/</link>
      <pubDate>Sun, 13 Nov 2022 21:15:53 +0800</pubDate>
      
      <guid>/posts/2022/11/linux-software-installation-and-configuration-records/</guid>
      <description>BASE 1apt update -y 2apt install curl wget vim net-tools git nginx -y 3# apt install openssh* 4 5-------------------------------------------- 6 7yum update -y 8yum install curl wget vim net-tools git nginx -y 9yum install openssh* yum镜像 1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 2wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # centos7 3 4yum makecache 5yum -y update apt镜像 1cp /etc/apt/sources.list /etc/apt/sources.list.bak 2vim /etc/apt/sources.list 3 4lsb_release -c 查看版本代码 5 6如要用于其他版本，把 focal 换成其他版本代号即可: 22.04：jammy；20.04：focal；18.04：bionic；16.04：xenial；14.04：trusty。 7 8# 默认注释了源码仓库，如有需要可自行取消注释 9deb https://mirrors.</description>
    </item>
    
    <item>
      <title>Git 配置记录</title>
      <link>/posts/2022/10/git-configuration-record/</link>
      <pubDate>Thu, 13 Oct 2022 21:40:46 +0800</pubDate>
      
      <guid>/posts/2022/10/git-configuration-record/</guid>
      <description>Git 初始化 1git config --global user.name &amp;#34;akynazh&amp;#34; 2git config --global user.email &amp;#34;akynazh@qq.com&amp;#34; 3# git config pull.rebase false 配置 Http 代理 1git config --global http.https://github.com.proxy socks5://127.0.0.1:7890 配置 SSH 代理 1# ~/.ssh/config 2 3Host github.com 4 User git 5 Port 22 6 Hostname github.com 7 IdentityFile ~/.ssh/id_rsa 8 ProxyCommand connect -S 127.0.0.1:7890 -a none %h %p 9 10Host ssh.github.com 11 User git 12 Port 443 13 Hostname ssh.github.com 14 IdentityFile ~/.ssh/id_rsa 15 ProxyCommand connect -S 127.</description>
    </item>
    
    <item>
      <title>Docker 软件安装记录</title>
      <link>/posts/2022/10/docker-software-installation-record/</link>
      <pubDate>Thu, 13 Oct 2022 21:28:37 +0800</pubDate>
      
      <guid>/posts/2022/10/docker-software-installation-record/</guid>
      <description>Docker 1curl -fsSL https://get.docker.com | bash -s docker 2# curl -sSL https://get.daocloud.io/docker | sh Mirror 1vim /etc/docker/daemon.json 2 3{ 4 &amp;#34;registry-mirrors&amp;#34;: [ 5 &amp;#34;https://docker.mirrors.ustc.edu.cn&amp;#34;, 6 &amp;#34;http://hub-mirror.c.163.com&amp;#34;, 7 &amp;#34;https://registry.docker-cn.com&amp;#34; 8 ] 9} 10 11---------------------------------------------- 12 13systemctl restart docker Docker-compose 1curl -L &amp;#34;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose 2# curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose 3 4chmod +x /usr/local/bin/docker-compose 5ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 6# ln -s /usr/local/bin/docker-compose /usr/bin/dockerc 运行权限问题 1sudo usermod -aG docker $USER 2sudo reboot MySQL 1docker pull mysql:5.</description>
    </item>
    
    <item>
      <title>关于 hwbk 文件问题的解决和思考</title>
      <link>/posts/2022/10/solution-and-thinking-about-hwbk/</link>
      <pubDate>Mon, 03 Oct 2022 20:52:12 +0800</pubDate>
      
      <guid>/posts/2022/10/solution-and-thinking-about-hwbk/</guid>
      <description>hwbk文件问题 假如你知道hwbk是什么，那么你肯定为它的存在而烦恼过。
在华为系的机子上，任何第三方工具想要删除相册的一张图片，系统都会做出保护，你使用的第三方工具并没有真的删除那张图片，系统拦截了删除操作并再对文件添加后缀名.hwbk。
更新：现在只要不卸载系统图库，系统会拦截第三方软件的删除操作，并将删除的照片送进图库的回收站，并不会生成hwbk文件。如果卸载了系统自带图库，则可以参考本文。
其它类似的问题 还有一个例子就是默认桌面程序了，第三方软件nova launcher比系统自带的桌面程序好用得多，而实际上却完全无法使用，因为默认程序无法修改，系统直接锁死。
同时，现在华为系的机子，只要是Android8以后的，似乎已经再也无法解开bootloader锁，官方不再给你申请的机会了，获取root，刷机已经成为一种幻想。
如何看待这些问题 商家总会告诉你这是处于安全保护的考虑，可以防止你误删了东西。其实完全没有必要，第三方软件也有回收站功能，只要自己注意不要安装来路不明的软件，病毒也不会莫名其妙找上门。
他不会给你一个选项，删除是否做出hwbk保护，而是直接强行做出保护，拒绝第三方的删除，这就等同于直接废了第三方软件的删除功能。这让许多人不得不使用系统自带软件，否则就是两头跑，这边删了，再到系统自带软件删一次。
你可以说这是为了更好的安全性用户所必须做出的牺牲，但也可以说这只是商家为了利益而主动选择的一种控制用户的手段。
从本质上看，无疑是一种很单纯的商业考量。他们让自己的系统封闭起来，强行让用户推动，发展自己的生态。
如果华为自带的软件够好，我想慢慢地，用户也会主动选择自带的软件（就像apple一样）。他们不是从自身找问题，改善自己的产品，而是强迫用户去适应，剥夺自由选择的权力。
如果是为了安全方面的问题，我想，一定也不只有这种一刀切的手段吧？对于安全方面的问题，我觉得应该让用户自己做决定，自己负责。就像有的人想获取root权限，他首先应该已经明白了获取root的后果是什么，愿意承担相应的风险。
为用户体验着想，绝不是强迫用户干什么，而是让用户自己决定干什么。
然而，他们凭什么为用户体验着想，能赚到钱不就完了？呵呵。
当然，对于大多普通用户而言，或许从来都遇不到这些问题，但是当有一天你遇到这些问题并为之困扰时，你多少会感觉自由被剥夺了。毕竟，我们自己花钱买的东西，为什么不能让我们自己自由支配呢？
通过adb干掉系统自带软件 电脑安装adb kits，adb所在目录加入环境变量（只是为了方便使用） 手机加入开发者模式 手机连接电脑，开启usb调试 命令行运行：adb devices 运行：adb shell 获取软件包名，写入applist.txt：pm list packages &amp;gt; applist.txt 通过包名卸载软件：pm uninstall --user 0 {pkg_name}（包名可自行google） 这是一个可选项，在你很反感系统自带软件时可以进行操作。
下面，回到hwbk问题。
让脚本帮我们自动消灭hwbk吧 假设你使用的是第三方的图库或者文件管理器，为了安全的考量，建议开启第三方软件的回收站。
当存在大量hwbk文件时，一个个手动删除是不存在的，而且每天都可能产生新的hwbk，所以定时地进行扫描删除也是必要的。
另外，通过尝试，将.hwbk后缀进行更改即可删除该文件。
通过脚本可以方便地进行操作，这里我通过js完成工作。
使用javascript进行删除操作 做法：每天固定一个时间（建议是在自己睡觉时）完成自动的清除。对所有目标文件夹进行扫描（递归性地），如果找到了.hwbk文件，将其后缀重命名为.hwbk.fuck_hwbk，再执行删除操作即可。
kill_hwbk.js
1function kill_hwbk_r(parent_dir) { 2 let child_dirs = files.listDir(parent_dir, function(name) { 3 return files.isDir(files.join(parent_dir, name)); 4 }); 5 let hwbk_files = files.listDir(parent_dir, function(name) { 6 return name.</description>
    </item>
    
    <item>
      <title>Wsl 自定义安装位置</title>
      <link>/posts/2022/07/wsl-custom-installation-location/</link>
      <pubDate>Sat, 23 Jul 2022 17:27:31 +0800</pubDate>
      
      <guid>/posts/2022/07/wsl-custom-installation-location/</guid>
      <description>自定义wsl安装位置 下载wsl-ubuntu： 20.04版本：https://aka.ms/wslubuntu2004 18.04版本：https://aka.ms/wsl-ubuntu-1804 其他版本自行前往官网查找。
修改后缀名 下载后得到AppxBundle文件，将后缀名改为zip，然后解压。
解压后得到如下内容：
选择x64或ARM64的安装包均可均可，将后缀名改为zip，然后解压。
开始安装wsl-ubuntu 解压后得到如下内容：
双击ubuntu.exe，即可开始安装wsl-ubuntu。
安装完成后在该目录下得到虚拟盘：
注：虚拟盘也可能变成rootfs文件。
登录wsl 安装时会让你指定用户名和密码，这个用户是默认添加到sudoers里的。
如果想用root登录，通过sudo passwd root可以设置root密码（root刚开始没有密码），接着通过su即可登录root。
From My Blog: akynazh.
Over.</description>
    </item>
    
    <item>
      <title>Hugo 通过 Algolia 添加站内搜索功能</title>
      <link>/posts/2022/07/hugo-adds-onsite-search-function-through-algolia/</link>
      <pubDate>Wed, 20 Jul 2022 23:46:01 +0800</pubDate>
      
      <guid>/posts/2022/07/hugo-adds-onsite-search-function-through-algolia/</guid>
      <description>注册账号并创建Index 官网链接：Algolia，注册完成后保存好ApiID和ApiKey。
接着，创建一个Index，保存好Index的名称。
数据生成以及上传Algolia 方法一：通过hugo-algolia插件的方式 一、下载hugo-algolia： npm install -g hugo-algolia
二、编写config.yaml
网站根目录下创建config.yaml，编写参数如下：
1--- 2algolia: 3 index: &amp;#34;{indexName}&amp;#34; 4 key: &amp;#34;{key}&amp;#34; 5 appID: &amp;#34;{appID}&amp;#34; 6--- 三、生成algolia.json
网站根目录下运行： hugo-algolia -s，即可生成 {site}/public/algolia.json，同时该数据也同步到了algolia账户下，可以去官网查看。
四、前往algolia的indices进行搜索类型的设置
可以选择按tag，category，content等内容进行搜索，并指定优先级。
方法二：通过GithubAction的方式 这里不通过插件而是通过hugo定制化地生成algolia.json，然后通过GithubAction在每次push时上传数据。
个人更推荐这样做，更好定制化且方便。同时上面方法一有个bug，对中文数据好像不支持。
一、配置algolia输出文件 1outputs: 2home: 3 - HTML 4 - RSS 5 - Algolia 6outputFormats: 7Algolia: 8 mediaType: application/json 9 baseName: algolia 10 isPlainText: true 二、生成algolia.json 编辑 {site}/themes/layouts/_default/list.algolia.json 如下：
1[ 2 {{- range $index, $entry := .Site.RegularPages }} 3 {{- if $index }}, {{ end }} 4 { 5 &amp;#34;objectID&amp;#34;: &amp;#34;{{ .</description>
    </item>
    
    <item>
      <title>Linux 展示性内容配置记录</title>
      <link>/posts/2022/07/linux-display-content-configuration-record/</link>
      <pubDate>Wed, 13 Jul 2022 21:21:50 +0800</pubDate>
      
      <guid>/posts/2022/07/linux-display-content-configuration-record/</guid>
      <description>Vim 1vim /etc/vimrc 2# vim /etc/vim/vimrc 3 4set tabstop=4 # 修改vim中tab长度 5set shiftwidth=4 # 修改vim自动缩进长度 6set noeb vb t_vb= # 禁用vim蜂鸣声 1vim /etc/inputrc 2 3set bell-style none # 禁用bash蜂鸣声 主机名称 1hostnamectl 2 3hostnamectl set-hostname xxx 登录欢迎信息配置 1vim /etc/update-motd.d 自行修改基本欢迎信息。
1vim /etc/ssh/sshd_config 2 3PrintLastLog no 不打印上次登录信息。
命令提示符 1vim ~/.bashrc 2 3export PS1=&amp;#34;[\u =&amp;gt; \w]\$ &amp;#34; 1\a	铃声字符 2\d	格式为“日 月 年”的日期 3\e	ASCII 转义字符 4\h	本地主机名 5\H	完全合格的限定域主机名 6\j	shell 当前管理的作业数 7\1	shell 终端设备名的基本名称 8\n	ASCII 换行字符 9\r	ASCII 回车 10\s	shell 的名称 11\t	格式为“小时:分钟:秒”的24小时制的当前时间 12\T	格式为“小时:分钟:秒”的12小时制的当前时间 13\A	格式为“小时:分钟”的24小时制的当前时间 14@	格式为 am/pm 的12小时制的当前时间 15\s	shell的名字 16\u	当前用户的用户名 17\v	bash shell 的版本 18\V	bash shell 的发布级别 19\w	当前工作目录 20\W	当前工作目录的基本名称 21!</description>
    </item>
    
    <item>
      <title>通过 Wireshark 分析 TCP 原理</title>
      <link>/posts/2022/06/analyze-tcp-principle-through-wireshark/</link>
      <pubDate>Thu, 09 Jun 2022 23:18:55 +0800</pubDate>
      
      <guid>/posts/2022/06/analyze-tcp-principle-through-wireshark/</guid>
      <description>使用Wireshark作为抓包工具，通过ftp文件上传过程分析tcp原理，主要分析过程包括三次握手建立连接的过程，文件传输的过程，四次挥手断开连接的过程。
设备信息 主机：安装了ftp的window11（ip:172.23.224.1） 虚拟机：安装了vsftpd的wsl2（ubuntu18）(ip:172.23.234.65) 操作与分析过程 打开Wireshark进行捕获 选择**vEthernet(WSL)**连接进行捕获。 使用过滤表达式ip.addr==172.23.234.65&amp;amp;&amp;amp;tcp进行捕获。 通过ftp上传文件 1PS C:\Users\akyna&amp;gt; ftp 172.23.234.65 2连接到 172.23.234.65。 3220 (vsFTPd 3.0.3) 4200 Always in UTF8 mode. 5用户(172.23.234.65:(none)): akyna 6331 Please specify the password. 7密码: 8230 Login successful. 9 10ftp&amp;gt; put a.txt 11200 PORT command successful. Consider using PASV. 12150 Ok to send data. 13226 Transfer complete. 14ftp: 发送 42 字节，用时 0.00秒 42000.00千字节/秒。 可见已经传输成功。
对捕获的数据进行分析 回到Wireshark，分析捕获的数据：
上图已经包括了三次握手建立连接，登录验证，文件传输，四次挥手结束连接这几个主要的过程。
下面通过生成流量图进行具体分析：
（一）三次握手建立连接
第一次握手：client通过6518端口向server发送连接请求，发送SYN和Seq，server在端口21进行监听并接收到请求。
第二次握手：server监听到请求后发送SYN，ACK和Seq，client接收到回复。
第三次握手：client接收到恢复后发送Seq（等于刚接收到的Ack的值）和Ack，server接收到并确认Seq正确，完成连接。
（二）文件传输过程
首先，还是三次握手在client端口6540和server端口20之间建立连接，这两个端口用于传输数据； 接着，server端口21回复&amp;quot;Response 150 Ok to send data&amp;quot;给client端口6518，含PSH标识，表明可以开始传输数据； 然后，client开始发送数据包，长为42，且含PSH，表示可以接收数据，server接收到后回传的Ack应该加上数据包长，即1+42； 接着，client发送了FIN标识，表明发送完毕，server发送了FIN标识，表明将停止接收，client发送ACK确定server可以停止接收； 最后，client端口6518回复&amp;quot;Response 226 Transfer complete&amp;quot;给server端口21，表明传输完毕。 （三）四次挥手结束连接</description>
    </item>
    
    <item>
      <title>配置网络以实现主机和虚拟机系统互通</title>
      <link>/posts/2022/02/configure-the-network-to-realize-the-interworking-between-host-and-virtual-machine-system/</link>
      <pubDate>Sun, 13 Feb 2022 21:20:01 +0800</pubDate>
      
      <guid>/posts/2022/02/configure-the-network-to-realize-the-interworking-between-host-and-virtual-machine-system/</guid>
      <description>主机配置防火墙入站规则 主机如果没开启防火墙则可以跳过这一步。
进入防火墙管理界面，新建入站规则放通目标虚拟机系统IP即可。
选择桥接模式 默认好像是NAT模式，改为桥接模式，指定网卡为当前主机网络的网卡，我的是“Realtek PCIe.GBE Family Controller”。
我的主机网络网关是 192.168.1.1，子网掩码为 255.255.255.0，IP为 192.168.1.126，我想配置虚拟机网络IP为 192.168.1.127 或者 192.168.1.128。
Ubuntu配置静态IP 通过netplan的方法进行，编辑 /etc/netplan/00-installer-config.yaml如下：
1network: 2 ethernets: 3 enp0s3: 4 dhcp4: no 5 optional: no 6 nameservers: 7 addresses: [114.114.114.114, 8.8.8.8] 8 gateway4: 192.168.1.1 9 addresses: [192.168.1.128/24] 10 version: 2 然后执行 sudo netplan apply即可。
CentOS配置静态IP 找到当前网络下网卡名，然后编辑/etc/sysconfig/network-scripts下的ifcfg-{网卡名}文件如下：
1BOOTPROTO=&amp;#34;static&amp;#34; # 静态IP 2IPADDR=192.168.1.127 # IP 3NETMASK=255.255.255.0 # 子网掩码 4GATEWAY=192.168.1.1 # 网关 5DNS1=114.114.114.114 6DNS2=8.8.8.8 7ONBOOT=yes 之后再重启网络服务即可：
1systemctl restart network From my blog: akynazh.</description>
    </item>
    
    <item>
      <title>Git 快速初始化操作</title>
      <link>/posts/2021/12/git-quick-initialization-operation/</link>
      <pubDate>Fri, 10 Dec 2021 18:10:07 +0800</pubDate>
      
      <guid>/posts/2021/12/git-quick-initialization-operation/</guid>
      <description>git初次拉取远程仓库 首先从github建立一个仓库，获取仓库地址url，然后进入项目所在文件夹，运行以下代码：
1&amp;gt; git init # 初始化仓库，生成.git文件 2 3&amp;gt; git add . # 将项目文件的修改信息添加到.git内的一个暂存区（index） 4 5&amp;gt; git commit -m “init” # 将暂存区的修改信息提交到分支 6 7&amp;gt; git remote add origin ${url} # 添加远程仓库 8 9&amp;gt; git push origin master # 将本地分支推送到远程仓库 这里执行完 git commit -m &amp;quot;init&amp;quot; 后，我们查看一下本地分支信息：
1&amp;gt; git branch 2* master 可见git自动为我们本地创建了一个master分支。
执行完 git push origin master 后，我们查看一下本地分支与远程分支的映射关系：
1&amp;gt; git branch -a 2* master 3 remotes/origin/master 4 5&amp;gt; git branch -vv 6* master 3a31f4c init 可见并没有产生映射。</description>
    </item>
    
    <item>
      <title>Window 增加右键打开选项</title>
      <link>/posts/2021/11/add-right-click-open-option-in-window/</link>
      <pubDate>Sat, 20 Nov 2021 18:10:30 +0800</pubDate>
      
      <guid>/posts/2021/11/add-right-click-open-option-in-window/</guid>
      <description>加入注册表界面 win+R
regedit
增加右键操作文件选项 以vscode作为编辑文件实例 注册表页面下进入：
计算机\HKEY_CLASSES_ROOT*\shell
新建项 Vscode
右键Vscode并新建项command
编辑command默认选项值为： ${vscodepath}\Code.exe %1 %1是可选的参数，这里必须要加，表示作用于该文件。
编辑Vscode值
编辑右键显示名称：默认值改为Open with vscode （不编辑则为新建项的名称）
编辑右键显示图标：新建字符串值icon 添加：${vscodepath}\Code.exe (有些可以这样，但一般为ico文件)
增加目录下右键打开选项 以window terminal作为实例 注册表页面下进入：
计算机\HKEY_CLASSES_ROOT\Directory\Background\shell
新建项 Terminal
右键Terminal 新建项command
编辑command默认选项值为：${terminalpath}\wt.exe 编辑Terminal值
编辑右键显示名称：默认值改为Open in terminal （不编辑则为新建项的名称）
编辑右键显示图标：新建字符串值icon 添加：${terminalicon}
编辑window terminal的json配置文件
对应位置修改如下，&amp;quot;.&amp;ldquo;即表示当前目录。 1 &amp;#34;profiles&amp;#34;: 2 { 3 &amp;#34;defaults&amp;#34;: 4 { 5 &amp;#34;startingDirectory&amp;#34; : &amp;#34;.&amp;#34; 6 }, 7 ... 8 } over</description>
    </item>
    
    <item>
      <title>Docker 简单使用记录</title>
      <link>/posts/2021/05/docker-simple-use-process-record/</link>
      <pubDate>Wed, 19 May 2021 22:52:52 +0800</pubDate>
      
      <guid>/posts/2021/05/docker-simple-use-process-record/</guid>
      <description>下载并运行ubuntu镜像 1[root@VM-0-11-centos ~]# docker run ubuntu:15.10 /bin/echo &amp;#34;crazy thursday&amp;#34; 2crazy thursday 运行ubuntu并开启bash交互 1[root@VM-0-11-centos ~]# docker run -i -t ubuntu:15.10 /bin/bash 2root@fda3220ed59f:/# echo hello 3hello 4root@fda3220ed59f:/# cat /proc/version 5Linux version 3.10.0-1160.45.1.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) #1 SMP Wed Oct 13 17:20:51 UTC 2021 6root@fda3220ed59f:/# ls 7bin dev home lib64 mnt proc run srv tmp var 8boot etc lib media opt root sbin sys usr 9root@fda3220ed59f:/# exit 10exit 运行进程并观察 1[root@VM-0-11-centos ~]# docker run -d ubuntu:15.</description>
    </item>
    
    <item>
      <title>IDEA 配置使用记录</title>
      <link>/posts/2021/01/idea-configuration-usage-record/</link>
      <pubDate>Sun, 17 Jan 2021 21:46:42 +0800</pubDate>
      
      <guid>/posts/2021/01/idea-configuration-usage-record/</guid>
      <description>控制台中文乱码解决 菜单栏HELP-&amp;gt;Edit Custom VM OPtions中加 -Dfile.encoding=utf-8 重启idea IDEA开启RunDashboard 1# .idea/workspace.xml 2 3&amp;lt;component name=&amp;#34;RunDashboard&amp;#34;&amp;gt; 4 &amp;lt;option name=&amp;#34;configurationTypes&amp;#34;&amp;gt; 5 &amp;lt;set&amp;gt; 6 &amp;lt;option value=&amp;#34;SpringBootApplicationConfigurationType&amp;#34; /&amp;gt; 7 &amp;lt;/set&amp;gt; 8 &amp;lt;/option&amp;gt; 9&amp;lt;/component&amp;gt; IDEA关闭拼写 1Settings -&amp;gt; Editor -&amp;gt; Inspection -&amp;gt; Proofreading -&amp;gt; 关闭Typo IDEA配置快捷输入 1editor -&amp;gt; live template IDEA常用快捷键 1alt + ctrl + L : 格式化 2 3ctrl + shift + r : 替换字符 4 5ctrl + r : 在当前文件中替换字符 6 7ctrl + shift + n : 搜索项目文件 8 9ctrl + f : 在当前文件下搜索字符 10 11ctrl + shift + t : 进行快捷抛异常 12 13alt + 上下键 : 光标移到下或上一层 禁用 double shift 对于2021.</description>
    </item>
    
    <item>
      <title>实现 SSH 免 IP 免密登录</title>
      <link>/posts/2021/01/realize-ssh-ipfree-and-secret-free-login/</link>
      <pubDate>Wed, 13 Jan 2021 21:53:43 +0800</pubDate>
      
      <guid>/posts/2021/01/realize-ssh-ipfree-and-secret-free-login/</guid>
      <description>编辑 ~/.ssh/config 1Host 输入代替名 2 HostName 输入IP 3 Port 输入端口号 4 User 输入用户名 5 # ProxyCommand &amp;#34;C:\Program Files\Git\mingw64\bin\connect.exe&amp;#34; -S 127.0.0.1:7890 -a none %h %p 6 7# 定时发送心跳确保不断开连接 8ServerAliveInterval 30 # 每隔30秒发送一次 9ServerAliveCountMax 60 # 连续60次服务端无响应断开连接 生成并发送密钥 1ssh-keygen -t rsa 然后将公钥 ~/.ssh/id_rsa.pub 复制到目标主机 ~/.ssh/authorized_keys 文件中。
可能出现的问题：密钥算法不匹配 如果出现以下错误：
no matching key exchange method found. Their offer: diffie-hellman-group1-sha1
则是本地密钥算法与远程主机密钥算法不匹配造成的！
可以在ssh_config或config文件中添加密钥算法配置：
1Host 输入代替名 2	HostName 输入IP 3	Port 输入端口号 4	User 输入用户 5	KexAlgorithms +diffie-hellman-group1-sha1 From my blog: akynazh.</description>
    </item>
    
  </channel>
</rss>
